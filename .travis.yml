language: java
jdk:
  - openjdk8

# Travis CI를 어느 브랜치가 푸시될 때 수행할지 지정
branches: 
  only:
    - master

# Travis CI 서버의 Home
# 그레이들을 통해 의존성을 받으면 이를 해당 디렉토리에 캐시하여, 같은 의존성은 다음 배포때부터 다시 받지 않는다.
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

#프로젝트 내부에 둔 gradlew을 통해 Clean&Build를 수행      
script: "./gradlew clean build"


# gradlew 실행 권한 부여
before_install:
  - chmod +x gradlew
  -

before_deploy: #deploy명령어 실행 전에 수행 / CodeDeploy는 Jar파일은 인식 못하므로 Jar+기타 설정 파일들을 모아 압축
  - zip -r springboot-webservice * #현재 위치의 모든 파일을 해당 이름을 압축
  - mkdir -p deploy #deploy 디렉토리를 Travis CI가 실행중인 위치에서 생성
  - mv springboot-webservice.zip deploy/springboot-webservice.zip #해당 파일을 deploy/ 아래로 이동

deploy: #외부 서비스와 연동될 행위들을 선언
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY
    bucket: k-springboot-build #S3 버킷
    region: ap-northeast-2
    skip_cleanup: true
    acl: private # zip파일 접근을 private으로
    local_dir: deploy # before_deploy에서 생성한 deploy 디렉토리를 지정 > 여기 위치한 파일들만 S3로 전송
    wait-until-deployed: true

  - provider: codedeploy
      access_key_id: $AWS_ACCESS_KEY
      secret_access_key: $AWS_SECRET_KEY

      bucket: k-springboot-build # S3 버킷
      key: k-springboot2-webservice.zip # 빌드 파일을 압축해서 전달
      bundle_type: zip # 압축 확장자
      application: k-springboot2-webservice # 웹 콘솔에서 등록한 CodeDeploy 애플리케이션
      deployment_group: k-springboot2-webservice-group # 웹 콘솔에서 등록한 CodeDeploy 배포 그룹
      region: ap-northeast-2
      wait-until-deployed: true


# CI 실행 완료 시 메일로 알람
#Travis CI 실행 완료 시 자동으로 알람이 가도록 설정
notifications:
  email:
    recipients: 
      - rladudtjr871@naver.com